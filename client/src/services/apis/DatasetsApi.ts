/* tslint:disable */
/* eslint-disable */
/**
 * Vector Tile Lab API
 * API for Vector Tile Lab
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateDatasetsTilesets400Response,
  CreateDatasetsTilesetsRequest,
  Dataset,
  RetrieveDatasetsProgress200Response,
  RetrieveDatasetsTilesetsPresignedUrl200Response,
  RetrieveDatasetsTilesetsProgress200Response,
  Tileset,
} from '../models/index';
import {
    CreateDatasetsTilesets400ResponseFromJSON,
    CreateDatasetsTilesets400ResponseToJSON,
    CreateDatasetsTilesetsRequestFromJSON,
    CreateDatasetsTilesetsRequestToJSON,
    DatasetFromJSON,
    DatasetToJSON,
    RetrieveDatasetsProgress200ResponseFromJSON,
    RetrieveDatasetsProgress200ResponseToJSON,
    RetrieveDatasetsTilesetsPresignedUrl200ResponseFromJSON,
    RetrieveDatasetsTilesetsPresignedUrl200ResponseToJSON,
    RetrieveDatasetsTilesetsProgress200ResponseFromJSON,
    RetrieveDatasetsTilesetsProgress200ResponseToJSON,
    TilesetFromJSON,
    TilesetToJSON,
} from '../models/index';

export interface CreateDatasetsRequest {
    name: string;
    geojsonFile: Blob;
}

export interface CreateDatasetsTilesetsOperationRequest {
    datasetId: number;
    createDatasetsTilesetsRequest?: CreateDatasetsTilesetsRequest;
}

export interface DestroyDatasetsRequest {
    id: number;
}

export interface DestroyDatasetsTilesetsRequest {
    datasetId: number;
    id: number;
}

export interface ListDatasetsTilesetsRequest {
    datasetId: number;
    status?: ListDatasetsTilesetsStatusEnum;
}

export interface RetrieveDatasetsRequest {
    id: number;
}

export interface RetrieveDatasetsProgressRequest {
    id: number;
}

export interface RetrieveDatasetsTilesetsRequest {
    datasetId: number;
    id: number;
}

export interface RetrieveDatasetsTilesetsPresignedUrlRequest {
    datasetId: number;
    id: number;
}

export interface RetrieveDatasetsTilesetsProgressRequest {
    datasetId: number;
    id: number;
}

/**
 * 
 */
export class DatasetsApi extends runtime.BaseAPI {

    /**
     */
    async createDatasetsRaw(requestParameters: CreateDatasetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Dataset>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling createDatasets().'
            );
        }

        if (requestParameters['geojsonFile'] == null) {
            throw new runtime.RequiredError(
                'geojsonFile',
                'Required parameter "geojsonFile" was null or undefined when calling createDatasets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['name'] != null) {
            formParams.append('name', requestParameters['name'] as any);
        }

        if (requestParameters['geojsonFile'] != null) {
            formParams.append('geojson_file', requestParameters['geojsonFile'] as any);
        }

        const response = await this.request({
            path: `/api/v1/datasets/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DatasetFromJSON(jsonValue));
    }

    /**
     */
    async createDatasets(requestParameters: CreateDatasetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Dataset> {
        const response = await this.createDatasetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new tileset with custom tippecanoe options.
     */
    async createDatasetsTilesetsRaw(requestParameters: CreateDatasetsTilesetsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tileset>> {
        if (requestParameters['datasetId'] == null) {
            throw new runtime.RequiredError(
                'datasetId',
                'Required parameter "datasetId" was null or undefined when calling createDatasetsTilesets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v1/datasets/{datasetId}/tilesets/`.replace(`{${"datasetId"}}`, encodeURIComponent(String(requestParameters['datasetId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDatasetsTilesetsRequestToJSON(requestParameters['createDatasetsTilesetsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TilesetFromJSON(jsonValue));
    }

    /**
     * Create a new tileset with custom tippecanoe options.
     */
    async createDatasetsTilesets(requestParameters: CreateDatasetsTilesetsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tileset> {
        const response = await this.createDatasetsTilesetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async destroyDatasetsRaw(requestParameters: DestroyDatasetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling destroyDatasets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v1/datasets/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyDatasets(requestParameters: DestroyDatasetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.destroyDatasetsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async destroyDatasetsTilesetsRaw(requestParameters: DestroyDatasetsTilesetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['datasetId'] == null) {
            throw new runtime.RequiredError(
                'datasetId',
                'Required parameter "datasetId" was null or undefined when calling destroyDatasetsTilesets().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling destroyDatasetsTilesets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v1/datasets/{datasetId}/tilesets/{id}/`.replace(`{${"datasetId"}}`, encodeURIComponent(String(requestParameters['datasetId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyDatasetsTilesets(requestParameters: DestroyDatasetsTilesetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.destroyDatasetsTilesetsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async listDatasetsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Dataset>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v1/datasets/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DatasetFromJSON));
    }

    /**
     */
    async listDatasets(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Dataset>> {
        const response = await this.listDatasetsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async listDatasetsTilesetsRaw(requestParameters: ListDatasetsTilesetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Tileset>>> {
        if (requestParameters['datasetId'] == null) {
            throw new runtime.RequiredError(
                'datasetId',
                'Required parameter "datasetId" was null or undefined when calling listDatasetsTilesets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v1/datasets/{datasetId}/tilesets/`.replace(`{${"datasetId"}}`, encodeURIComponent(String(requestParameters['datasetId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TilesetFromJSON));
    }

    /**
     */
    async listDatasetsTilesets(requestParameters: ListDatasetsTilesetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Tileset>> {
        const response = await this.listDatasetsTilesetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async retrieveDatasetsRaw(requestParameters: RetrieveDatasetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Dataset>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling retrieveDatasets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v1/datasets/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DatasetFromJSON(jsonValue));
    }

    /**
     */
    async retrieveDatasets(requestParameters: RetrieveDatasetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Dataset> {
        const response = await this.retrieveDatasetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the current processing progress for a specific dataset from Redis cache.
     * Get dataset processing progress
     */
    async retrieveDatasetsProgressRaw(requestParameters: RetrieveDatasetsProgressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RetrieveDatasetsProgress200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling retrieveDatasetsProgress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v1/datasets/{id}/progress/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetrieveDatasetsProgress200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the current processing progress for a specific dataset from Redis cache.
     * Get dataset processing progress
     */
    async retrieveDatasetsProgress(requestParameters: RetrieveDatasetsProgressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RetrieveDatasetsProgress200Response> {
        const response = await this.retrieveDatasetsProgressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async retrieveDatasetsTilesetsRaw(requestParameters: RetrieveDatasetsTilesetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tileset>> {
        if (requestParameters['datasetId'] == null) {
            throw new runtime.RequiredError(
                'datasetId',
                'Required parameter "datasetId" was null or undefined when calling retrieveDatasetsTilesets().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling retrieveDatasetsTilesets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v1/datasets/{datasetId}/tilesets/{id}/`.replace(`{${"datasetId"}}`, encodeURIComponent(String(requestParameters['datasetId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TilesetFromJSON(jsonValue));
    }

    /**
     */
    async retrieveDatasetsTilesets(requestParameters: RetrieveDatasetsTilesetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tileset> {
        const response = await this.retrieveDatasetsTilesetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate a presigned URL to access the PMTiles file directly from MinIO/S3 storage.
     * Get presigned URL for PMTiles file
     */
    async retrieveDatasetsTilesetsPresignedUrlRaw(requestParameters: RetrieveDatasetsTilesetsPresignedUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RetrieveDatasetsTilesetsPresignedUrl200Response>> {
        if (requestParameters['datasetId'] == null) {
            throw new runtime.RequiredError(
                'datasetId',
                'Required parameter "datasetId" was null or undefined when calling retrieveDatasetsTilesetsPresignedUrl().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling retrieveDatasetsTilesetsPresignedUrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v1/datasets/{datasetId}/tilesets/{id}/presigned_url/`.replace(`{${"datasetId"}}`, encodeURIComponent(String(requestParameters['datasetId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetrieveDatasetsTilesetsPresignedUrl200ResponseFromJSON(jsonValue));
    }

    /**
     * Generate a presigned URL to access the PMTiles file directly from MinIO/S3 storage.
     * Get presigned URL for PMTiles file
     */
    async retrieveDatasetsTilesetsPresignedUrl(requestParameters: RetrieveDatasetsTilesetsPresignedUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RetrieveDatasetsTilesetsPresignedUrl200Response> {
        const response = await this.retrieveDatasetsTilesetsPresignedUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the current generation progress for a specific tileset from Redis cache.
     * Get tileset generation progress
     */
    async retrieveDatasetsTilesetsProgressRaw(requestParameters: RetrieveDatasetsTilesetsProgressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RetrieveDatasetsTilesetsProgress200Response>> {
        if (requestParameters['datasetId'] == null) {
            throw new runtime.RequiredError(
                'datasetId',
                'Required parameter "datasetId" was null or undefined when calling retrieveDatasetsTilesetsProgress().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling retrieveDatasetsTilesetsProgress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v1/datasets/{datasetId}/tilesets/{id}/progress/`.replace(`{${"datasetId"}}`, encodeURIComponent(String(requestParameters['datasetId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetrieveDatasetsTilesetsProgress200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the current generation progress for a specific tileset from Redis cache.
     * Get tileset generation progress
     */
    async retrieveDatasetsTilesetsProgress(requestParameters: RetrieveDatasetsTilesetsProgressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RetrieveDatasetsTilesetsProgress200Response> {
        const response = await this.retrieveDatasetsTilesetsProgressRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListDatasetsTilesetsStatusEnum = {
    Completed: 'completed',
    Failed: 'failed',
    InProgress: 'in_progress'
} as const;
export type ListDatasetsTilesetsStatusEnum = typeof ListDatasetsTilesetsStatusEnum[keyof typeof ListDatasetsTilesetsStatusEnum];
