/* tslint:disable */
/* eslint-disable */
/**
 * Vector Tile Lab API
 * API for Vector Tile Lab
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Dataset,
  RetrieveDatasetsProgress200Response,
  RetrieveDatasetsProgress500Response,
} from '../models/index';
import {
    DatasetFromJSON,
    DatasetToJSON,
    RetrieveDatasetsProgress200ResponseFromJSON,
    RetrieveDatasetsProgress200ResponseToJSON,
    RetrieveDatasetsProgress500ResponseFromJSON,
    RetrieveDatasetsProgress500ResponseToJSON,
} from '../models/index';

export interface CreateDatasetsRequest {
    name: string;
    geojsonFile: Blob;
}

export interface DestroyDatasetsRequest {
    id: number;
}

export interface RetrieveDatasetsRequest {
    id: number;
}

export interface RetrieveDatasetsProgressRequest {
    id: number;
}

/**
 * 
 */
export class DatasetsApi extends runtime.BaseAPI {

    /**
     */
    async createDatasetsRaw(requestParameters: CreateDatasetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Dataset>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling createDatasets().'
            );
        }

        if (requestParameters['geojsonFile'] == null) {
            throw new runtime.RequiredError(
                'geojsonFile',
                'Required parameter "geojsonFile" was null or undefined when calling createDatasets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['name'] != null) {
            formParams.append('name', requestParameters['name'] as any);
        }

        if (requestParameters['geojsonFile'] != null) {
            formParams.append('geojson_file', requestParameters['geojsonFile'] as any);
        }

        const response = await this.request({
            path: `/api/v1/datasets/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DatasetFromJSON(jsonValue));
    }

    /**
     */
    async createDatasets(requestParameters: CreateDatasetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Dataset> {
        const response = await this.createDatasetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async destroyDatasetsRaw(requestParameters: DestroyDatasetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling destroyDatasets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v1/datasets/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyDatasets(requestParameters: DestroyDatasetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.destroyDatasetsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async listDatasetsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Dataset>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v1/datasets/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DatasetFromJSON));
    }

    /**
     */
    async listDatasets(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Dataset>> {
        const response = await this.listDatasetsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async retrieveDatasetsRaw(requestParameters: RetrieveDatasetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Dataset>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling retrieveDatasets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v1/datasets/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DatasetFromJSON(jsonValue));
    }

    /**
     */
    async retrieveDatasets(requestParameters: RetrieveDatasetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Dataset> {
        const response = await this.retrieveDatasetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the current processing progress for a specific dataset from Redis cache.
     * Get dataset processing progress
     */
    async retrieveDatasetsProgressRaw(requestParameters: RetrieveDatasetsProgressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RetrieveDatasetsProgress200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling retrieveDatasetsProgress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v1/datasets/{id}/progress/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetrieveDatasetsProgress200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the current processing progress for a specific dataset from Redis cache.
     * Get dataset processing progress
     */
    async retrieveDatasetsProgress(requestParameters: RetrieveDatasetsProgressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RetrieveDatasetsProgress200Response> {
        const response = await this.retrieveDatasetsProgressRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
