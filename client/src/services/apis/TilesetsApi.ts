/* tslint:disable */
/* eslint-disable */
/**
 * Vector Tile Lab API
 * API for Vector Tile Lab
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RetrieveDatasetsProgress500Response,
  RetrieveTilesetsPresignedUrl200Response,
  Tileset,
} from '../models/index';
import {
    RetrieveDatasetsProgress500ResponseFromJSON,
    RetrieveDatasetsProgress500ResponseToJSON,
    RetrieveTilesetsPresignedUrl200ResponseFromJSON,
    RetrieveTilesetsPresignedUrl200ResponseToJSON,
    TilesetFromJSON,
    TilesetToJSON,
} from '../models/index';

export interface DestroyTilesetsRequest {
    id: number;
}

export interface RetrieveTilesetsRequest {
    id: number;
}

export interface RetrieveTilesetsPresignedUrlRequest {
    id: number;
}

/**
 * 
 */
export class TilesetsApi extends runtime.BaseAPI {

    /**
     */
    async destroyTilesetsRaw(requestParameters: DestroyTilesetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling destroyTilesets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v1/tilesets/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyTilesets(requestParameters: DestroyTilesetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.destroyTilesetsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async listTilesetsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Tileset>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v1/tilesets/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TilesetFromJSON));
    }

    /**
     */
    async listTilesets(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Tileset>> {
        const response = await this.listTilesetsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async retrieveTilesetsRaw(requestParameters: RetrieveTilesetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tileset>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling retrieveTilesets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v1/tilesets/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TilesetFromJSON(jsonValue));
    }

    /**
     */
    async retrieveTilesets(requestParameters: RetrieveTilesetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tileset> {
        const response = await this.retrieveTilesetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate a presigned URL to access the PMTiles file directly from MinIO/S3 storage.
     * Get presigned URL for PMTiles file
     */
    async retrieveTilesetsPresignedUrlRaw(requestParameters: RetrieveTilesetsPresignedUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RetrieveTilesetsPresignedUrl200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling retrieveTilesetsPresignedUrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v1/tilesets/{id}/presigned_url/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetrieveTilesetsPresignedUrl200ResponseFromJSON(jsonValue));
    }

    /**
     * Generate a presigned URL to access the PMTiles file directly from MinIO/S3 storage.
     * Get presigned URL for PMTiles file
     */
    async retrieveTilesetsPresignedUrl(requestParameters: RetrieveTilesetsPresignedUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RetrieveTilesetsPresignedUrl200Response> {
        const response = await this.retrieveTilesetsPresignedUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
